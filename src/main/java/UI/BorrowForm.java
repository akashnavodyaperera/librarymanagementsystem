/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import Dao.BookDao;
import Dao.BorrowDao;
import DAO.MemberDao;
import Model.Book;
import Model.Borrow;
import Model.Member;
import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class BorrowForm extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(BorrowForm.class.getName());
    
    private final MemberDao memberDao;
    private final BookDao bookDao;
    private final BorrowDao borrowDao;
    private int selectedBorrowId = -1;
    
 
    
    
    public BorrowForm() {
        initComponents();
        this.setTitle("Borrow Management");
        this.setResizable(false);
        memberDao = new MemberDao();
        bookDao = new BookDao();
        borrowDao = new BorrowDao();
        
        issuedatetxt.setText(LocalDate.now().toString());
        
        setupEventListeners();
        
        loadAllBorrowRecords();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        membertable = new javax.swing.JTable();
        borrowbtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        searchmembertxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        borrowsearchtxt = new javax.swing.JTextField();
        borrowsearchbtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        booktable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        memberidtxt = new javax.swing.JTextField();
        bookidtxt = new javax.swing.JTextField();
        issuedatetxt = new javax.swing.JTextField();
        duedatetxt = new javax.swing.JTextField();
        returndatetxt = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        borrowtable = new javax.swing.JTable();
        searchbooktxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        searchbookbtn = new javax.swing.JButton();
        returnbtn = new javax.swing.JButton();
        clearbtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        serchmemberbtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();
        statuschoosertxt = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();

        setLocation(new java.awt.Point(400, 200));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 26)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 102));
        jLabel2.setText("LIBRARY MANAGEMENT SYSTEM");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 420, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 26)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 102));
        jLabel7.setText("SINDATHRIYA DIVISION");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, 330, -1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Status");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 510, 110, -1));

        membertable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Member Name"
            }
        ));
        jScrollPane1.setViewportView(membertable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 460, 100));

        borrowbtn.setBackground(new java.awt.Color(51, 204, 0));
        borrowbtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        borrowbtn.setForeground(new java.awt.Color(255, 255, 255));
        borrowbtn.setText("Borrow");
        borrowbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowbtnActionPerformed(evt);
            }
        });
        jPanel1.add(borrowbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 570, 110, 100));

        jLabel3.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel3.setText("Book Borrow Managemement");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, 280, -1));
        jPanel1.add(searchmembertxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 370, -1));

        jLabel4.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel4.setText("Search Borrow");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 320, 280, -1));
        jPanel1.add(borrowsearchtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 340, 380, -1));

        borrowsearchbtn.setBackground(new java.awt.Color(204, 0, 204));
        borrowsearchbtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        borrowsearchbtn.setForeground(new java.awt.Color(255, 255, 255));
        borrowsearchbtn.setText("Search");
        borrowsearchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowsearchbtnActionPerformed(evt);
            }
        });
        jPanel1.add(borrowsearchbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 340, 100, -1));

        booktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Book Name", "Availability"
            }
        ));
        jScrollPane2.setViewportView(booktable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 490, 100));

        jLabel5.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel5.setText("Search Member");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 280, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setText("Member ID");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 310, 110, -1));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Book ID");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 350, 80, -1));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 153));
        jLabel9.setText("Issue Date");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 390, 110, -1));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("Due Date");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 430, 110, -1));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 153));
        jLabel11.setText("Return Date");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 470, 110, -1));
        jPanel1.add(memberidtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 310, 300, -1));
        jPanel1.add(bookidtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, 300, -1));
        jPanel1.add(issuedatetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, 300, -1));
        jPanel1.add(duedatetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, 300, -1));
        jPanel1.add(returndatetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 470, 300, -1));

        borrowtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Member", "Book", "Borrow Date", "Due Date", "Return Date"
            }
        ));
        jScrollPane3.setViewportView(borrowtable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 370, 490, 310));
        jPanel1.add(searchbooktxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 150, 380, -1));

        jLabel12.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel12.setText("Search Book");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 130, 280, -1));

        searchbookbtn.setBackground(new java.awt.Color(204, 0, 204));
        searchbookbtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchbookbtn.setForeground(new java.awt.Color(255, 255, 255));
        searchbookbtn.setText("Search");
        searchbookbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbookbtnActionPerformed(evt);
            }
        });
        jPanel1.add(searchbookbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 150, 100, -1));

        returnbtn.setBackground(new java.awt.Color(0, 204, 204));
        returnbtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        returnbtn.setForeground(new java.awt.Color(255, 255, 255));
        returnbtn.setText("Return");
        returnbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnbtnActionPerformed(evt);
            }
        });
        jPanel1.add(returnbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 630, 100, 40));

        clearbtn.setBackground(new java.awt.Color(0, 0, 255));
        clearbtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearbtn.setForeground(new java.awt.Color(255, 255, 255));
        clearbtn.setText("Clear");
        clearbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbtnActionPerformed(evt);
            }
        });
        jPanel1.add(clearbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 630, 100, 40));

        deletebtn.setBackground(new java.awt.Color(255, 0, 0));
        deletebtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deletebtn.setForeground(new java.awt.Color(255, 255, 255));
        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });
        jPanel1.add(deletebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 570, 100, 40));

        serchmemberbtn.setBackground(new java.awt.Color(204, 0, 204));
        serchmemberbtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        serchmemberbtn.setForeground(new java.awt.Color(255, 255, 255));
        serchmemberbtn.setText("Search");
        serchmemberbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serchmemberbtnActionPerformed(evt);
            }
        });
        jPanel1.add(serchmemberbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 150, -1, -1));

        updatebtn.setBackground(new java.awt.Color(204, 204, 0));
        updatebtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updatebtn.setForeground(new java.awt.Color(255, 255, 255));
        updatebtn.setText("Update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });
        jPanel1.add(updatebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 570, 100, 40));

        statuschoosertxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "borrowed", "returned", "overdue" }));
        jPanel1.add(statuschoosertxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 510, 300, -1));

        jPanel2.setBackground(new java.awt.Color(0, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 710));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1148, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
         deleteBorrow();
    }//GEN-LAST:event_deletebtnActionPerformed

    private void searchbookbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbookbtnActionPerformed
           searchBooks();
    }//GEN-LAST:event_searchbookbtnActionPerformed

    private void serchmemberbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serchmemberbtnActionPerformed
          searchMembers();
    }//GEN-LAST:event_serchmemberbtnActionPerformed

    private void borrowsearchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowsearchbtnActionPerformed
          searchBorrowRecords();
    }//GEN-LAST:event_borrowsearchbtnActionPerformed

    private void borrowbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowbtnActionPerformed
        borrowBook();
    }//GEN-LAST:event_borrowbtnActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
       updateBorrow();
    }//GEN-LAST:event_updatebtnActionPerformed

    private void clearbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbtnActionPerformed
       clearFields();
    }//GEN-LAST:event_clearbtnActionPerformed

    private void returnbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnbtnActionPerformed
        returnBook();
    }//GEN-LAST:event_returnbtnActionPerformed

    private void setupEventListeners() {        
        
        membertable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memberTableRowSelected();
            }
        });
        
              booktable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableRowSelected();
            }
        });
        
        borrowtable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowTableRowSelected();
            }
        });
        
    }
    
    private void searchMembers() {
        String keyword = searchmembertxt.getText().trim();
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search term", "Validation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        List<Member> members = memberDao.searchMembers(keyword);
        DefaultTableModel model = (DefaultTableModel) membertable.getModel();
        model.setRowCount(0);
        
        for (Member member : members) {
            model.addRow(new Object[]{member.getMemberId(), member.getName()});
        }
        
        if (members.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No members found", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void searchBooks() {
        String keyword = searchbooktxt.getText().trim();
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search term", "Validation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        List<Book> books = bookDao.searchBooks(keyword);
        DefaultTableModel model = (DefaultTableModel) booktable.getModel();
        model.setRowCount(0);
        
        for (Book book : books) {
            String availability = book.isAvailability() ? "Available" : "Not Available";
            model.addRow(new Object[]{book.getBookId(), book.getTitle(), availability});
        }
        
        if (books.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No books found", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void memberTableRowSelected() {
        int selectedRow = membertable.getSelectedRow();
        if (selectedRow >= 0) {
            int memberId = (int) membertable.getValueAt(selectedRow, 0);
            memberidtxt.setText(String.valueOf(memberId));
        }
    }
    
    private void bookTableRowSelected() {
        int selectedRow = booktable.getSelectedRow();
        if (selectedRow >= 0) {
            int bookId = (int) booktable.getValueAt(selectedRow, 0);
            String availability = (String) booktable.getValueAt(selectedRow, 2);
            
            if ("Not Available".equals(availability)) {
                JOptionPane.showMessageDialog(this, "This book is currently not available", "Book Unavailable", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            bookidtxt.setText(String.valueOf(bookId));
        }
    }
    
    private void borrowBook() {
        try {
            // Validation
            if (memberidtxt.getText().trim().isEmpty() || bookidtxt.getText().trim().isEmpty() ||
                issuedatetxt.getText().trim().isEmpty() || duedatetxt.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all required fields", "Validation", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            int memberId = Integer.parseInt(memberidtxt.getText().trim());
            int bookId = Integer.parseInt(bookidtxt.getText().trim());
            Date issueDate = Date.valueOf(issuedatetxt.getText().trim());
            Date dueDate = Date.valueOf(duedatetxt.getText().trim());
            String status = (String) statuschoosertxt.getSelectedItem();
            
            LocalDate currentDate = LocalDate.now();
            LocalDate dueDateLocal = dueDate.toLocalDate();
            
            if (dueDateLocal.isBefore(currentDate)) {
                JOptionPane.showMessageDialog(this, "Due date cannot be in the past", "Validation", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            Book book = bookDao.getBookById(bookId);
            if (book == null || !book.isAvailability()) {
                JOptionPane.showMessageDialog(this, "This book is not available for borrowing", "Book Unavailable", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            Borrow borrow = new Borrow(memberId, bookId, issueDate, dueDate, status);
            
            if (borrowDao.addBorrow(borrow)) {
                bookDao.updateBookAvailability(bookId, false);
                
                JOptionPane.showMessageDialog(this, "Book borrowed successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                clearFields();
                loadAllBorrowRecords();
                
                ((DefaultTableModel) membertable.getModel()).setRowCount(0);
                ((DefaultTableModel) booktable.getModel()).setRowCount(0);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to borrow book", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number format", "Validation", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use YYYY-MM-DD", "Validation", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void searchBorrowRecords() {
        String keyword = borrowsearchtxt.getText().trim();
        if (keyword.isEmpty()) {
            loadAllBorrowRecords();
            return;
        }
        
        List<Map<String, Object>> records = borrowDao.searchBorrowRecords(keyword);
        displayBorrowRecords(records);
        
        if (records.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No borrow records found", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void loadAllBorrowRecords() {
        List<Map<String, Object>> records = borrowDao.getAllBorrowRecordsWithDetails();
        displayBorrowRecords(records);
    }
    
    private void displayBorrowRecords(List<Map<String, Object>> records) {
        DefaultTableModel model = (DefaultTableModel) borrowtable.getModel();
        model.setRowCount(0);
        
        for (Map<String, Object> record : records) {
            model.addRow(new Object[]{
                record.get("member_name"),
                record.get("book_title"),
                record.get("issue_date"),
                record.get("due_date"),
                record.get("return_date") != null ? record.get("return_date") : "Not Returned"
            });
        }
    }
    
    private void borrowTableRowSelected() {
        int selectedRow = borrowtable.getSelectedRow();
        if (selectedRow >= 0) {
            String keyword = borrowsearchtxt.getText().trim();
            List<Map<String, Object>> records;
            
            if (keyword.isEmpty()) {
                records = borrowDao.getAllBorrowRecordsWithDetails();
            } else {
                records = borrowDao.searchBorrowRecords(keyword);
            }
            
            if (selectedRow < records.size()) {
                Map<String, Object> record = records.get(selectedRow);
                
                selectedBorrowId = (int) record.get("borrow_id");
                memberidtxt.setText(String.valueOf(record.get("member_id")));
                bookidtxt.setText(String.valueOf(record.get("book_id")));
                issuedatetxt.setText(String.valueOf(record.get("issue_date")));
                duedatetxt.setText(String.valueOf(record.get("due_date")));
                
                if (record.get("return_date") != null) {
                    returndatetxt.setText(String.valueOf(record.get("return_date")));
                } else {
                    returndatetxt.setText("");
                }
                
                statuschoosertxt.setSelectedItem(record.get("status"));
            }
        }
    }
    
    private void updateBorrow() {
        if (selectedBorrowId == -1) {
            JOptionPane.showMessageDialog(this, "Please select a borrow record to update", "Validation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
            // Validation
            if (memberidtxt.getText().trim().isEmpty() || bookidtxt.getText().trim().isEmpty() ||
                issuedatetxt.getText().trim().isEmpty() || duedatetxt.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all required fields", "Validation", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            int memberId = Integer.parseInt(memberidtxt.getText().trim());
            int bookId = Integer.parseInt(bookidtxt.getText().trim());
            Date issueDate = Date.valueOf(issuedatetxt.getText().trim());
            Date dueDate = Date.valueOf(duedatetxt.getText().trim());
            String status = (String) statuschoosertxt.getSelectedItem();
            
            Date returnDate = null;
            if (!returndatetxt.getText().trim().isEmpty()) {
                returnDate = Date.valueOf(returndatetxt.getText().trim());
            }
            
            Borrow borrow = new Borrow(selectedBorrowId, memberId, bookId, issueDate, dueDate, returnDate, status);
            
            if (borrowDao.updateBorrow(borrow)) {
                JOptionPane.showMessageDialog(this, "Borrow record updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                clearFields();
                loadAllBorrowRecords();
                selectedBorrowId = -1;
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update borrow record", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number format", "Validation", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use YYYY-MM-DD", "Validation", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void returnBook() {
        if (selectedBorrowId == -1) {
            JOptionPane.showMessageDialog(this, "Please select a borrow record to return", "Validation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
            Borrow borrow = borrowDao.getBorrowById(selectedBorrowId);
            if (borrow == null) {
                JOptionPane.showMessageDialog(this, "Borrow record not found", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if ("returned".equals(borrow.getStatus())) {
                JOptionPane.showMessageDialog(this, "This book has already been returned", "Info", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            Date returnDate = Date.valueOf(LocalDate.now());
            
            if (borrowDao.returnBook(selectedBorrowId, returnDate)) {
                bookDao.updateBookAvailability(borrow.getBookId(), true);
                
                JOptionPane.showMessageDialog(this, "Book returned successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                clearFields();
                loadAllBorrowRecords();
                selectedBorrowId = -1;
            } else {
                JOptionPane.showMessageDialog(this, "Failed to return book", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void deleteBorrow() {
        if (selectedBorrowId == -1) {
            JOptionPane.showMessageDialog(this, "Please select a borrow record to delete", "Validation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this borrow record?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            Borrow borrow = borrowDao.getBorrowById(selectedBorrowId);
            
            if (borrowDao.deleteBorrow(selectedBorrowId)) {
                if (borrow != null && !"returned".equals(borrow.getStatus())) {
                    bookDao.updateBookAvailability(borrow.getBookId(), true);
                }
                
                JOptionPane.showMessageDialog(this, "Borrow record deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                clearFields();
                loadAllBorrowRecords();
                selectedBorrowId = -1;
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete borrow record", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void clearFields() {
        memberidtxt.setText("");
        bookidtxt.setText("");
        issuedatetxt.setText(LocalDate.now().toString());
        duedatetxt.setText("");
        returndatetxt.setText("");
        statuschoosertxt.setSelectedIndex(0);
        searchmembertxt.setText("");
        searchbooktxt.setText("");
        borrowsearchtxt.setText("");
        selectedBorrowId = -1;
        
        // Clear tables
        ((DefaultTableModel) membertable.getModel()).setRowCount(0);
        ((DefaultTableModel) booktable.getModel()).setRowCount(0);
    }
       
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new BorrowForm().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bookidtxt;
    private javax.swing.JTable booktable;
    private javax.swing.JButton borrowbtn;
    private javax.swing.JButton borrowsearchbtn;
    private javax.swing.JTextField borrowsearchtxt;
    private javax.swing.JTable borrowtable;
    private javax.swing.JButton clearbtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JTextField duedatetxt;
    private javax.swing.JTextField issuedatetxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField memberidtxt;
    private javax.swing.JTable membertable;
    private javax.swing.JButton returnbtn;
    private javax.swing.JTextField returndatetxt;
    private javax.swing.JButton searchbookbtn;
    private javax.swing.JTextField searchbooktxt;
    private javax.swing.JTextField searchmembertxt;
    private javax.swing.JButton serchmemberbtn;
    private javax.swing.JComboBox<String> statuschoosertxt;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables
}
